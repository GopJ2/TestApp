// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApp.Data;

namespace TestApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestApp.Data.Entity.Tests.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f14f0184-0b15-431f-b4e3-853224eed6dd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sample C# Tests Description",
                            Name = "C# Test",
                            UserId = new Guid("ce40ea29-e665-4a37-858b-e7d2359cdd4f")
                        },
                        new
                        {
                            Id = new Guid("b5902bf9-bea2-4fac-96bc-52c0ed52e6c7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sample Node.js Tests",
                            Name = "Node.js Test",
                            UserId = new Guid("ce40ea29-e665-4a37-858b-e7d2359cdd4f")
                        },
                        new
                        {
                            Id = new Guid("91b1aa6d-bd4a-43e0-ad89-e672709e35fe"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sample LINQ Tests",
                            Name = "LINQ Test",
                            UserId = new Guid("a8a4828c-60f0-4f99-bbe6-229df1d098a2")
                        },
                        new
                        {
                            Id = new Guid("c23f9ea6-50a9-417c-89bb-15194cc2787b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sample Javascript Tests",
                            Name = "Vanilla JS Test",
                            UserId = new Guid("a8a4828c-60f0-4f99-bbe6-229df1d098a2")
                        });
                });

            modelBuilder.Entity("TestApp.Data.Entity.Tests.TestAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f7e1f35-c0e9-4896-a111-ec7408fbb141"),
                            AnswerText = "public static void Program()",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("c3c83d8d-2b6a-4aff-94b8-850c231155d3")
                        },
                        new
                        {
                            Id = new Guid("a69c5de4-c7d1-4a8f-8ad1-63afffc92814"),
                            AnswerText = "public static void Main()",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("c3c83d8d-2b6a-4aff-94b8-850c231155d3")
                        },
                        new
                        {
                            Id = new Guid("df60b121-e699-4619-9121-29b13557c969"),
                            AnswerText = "public static void main()",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("c3c83d8d-2b6a-4aff-94b8-850c231155d3")
                        },
                        new
                        {
                            Id = new Guid("bab69880-3e3c-4d18-a5c3-da80ec91f424"),
                            AnswerText = "None of the presented",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("c3c83d8d-2b6a-4aff-94b8-850c231155d3")
                        },
                        new
                        {
                            Id = new Guid("822ba52d-ce43-4627-8686-2a5fd20f69ef"),
                            AnswerText = "Int32",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("b3ce3b36-c636-47ee-a8f2-be1d6457590e")
                        },
                        new
                        {
                            Id = new Guid("0b6408e9-e232-4199-a937-199bd6d379de"),
                            AnswerText = "Double",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("b3ce3b36-c636-47ee-a8f2-be1d6457590e")
                        },
                        new
                        {
                            Id = new Guid("ae4c57eb-ac49-49e4-bb3d-7b6d75d0e35f"),
                            AnswerText = "Decimal",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("b3ce3b36-c636-47ee-a8f2-be1d6457590e")
                        },
                        new
                        {
                            Id = new Guid("45cec12f-5f6a-4aa0-bb2d-99262febad94"),
                            AnswerText = "All the above",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("b3ce3b36-c636-47ee-a8f2-be1d6457590e")
                        },
                        new
                        {
                            Id = new Guid("8a2a75ed-3804-4ac7-bfc4-b6b1fb26fb1b"),
                            AnswerText = "String",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("92aeaa44-ac36-41b1-8c05-fedb3d4984e1")
                        },
                        new
                        {
                            Id = new Guid("ece4d187-f377-422e-bbe4-073004ef2856"),
                            AnswerText = "Double",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("92aeaa44-ac36-41b1-8c05-fedb3d4984e1")
                        },
                        new
                        {
                            Id = new Guid("ec933088-246a-41c6-8d0f-9664e9ef77d5"),
                            AnswerText = "Long",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("92aeaa44-ac36-41b1-8c05-fedb3d4984e1")
                        },
                        new
                        {
                            Id = new Guid("3854cf18-2df2-4cea-950a-87f3bc0079bf"),
                            AnswerText = "All the above",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("92aeaa44-ac36-41b1-8c05-fedb3d4984e1")
                        },
                        new
                        {
                            Id = new Guid("44fb38dd-b2ea-48ab-863b-c785c0ce0e30"),
                            AnswerText = "It allows assignment of null to reference type.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("8891f8a7-9bbc-4a47-a143-99721b2cdf9b")
                        },
                        new
                        {
                            Id = new Guid("14c780ee-6d60-4536-a111-ac606871ad73"),
                            AnswerText = "It allows assignment of null to value type.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("8891f8a7-9bbc-4a47-a143-99721b2cdf9b")
                        },
                        new
                        {
                            Id = new Guid("4f375080-95ec-415d-b959-e2aad06f0666"),
                            AnswerText = "It allows assignment of null to static class.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("8891f8a7-9bbc-4a47-a143-99721b2cdf9b")
                        },
                        new
                        {
                            Id = new Guid("9d0376a8-c448-45a0-8a11-f79e524d083e"),
                            AnswerText = "None of the above",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("8891f8a7-9bbc-4a47-a143-99721b2cdf9b")
                        },
                        new
                        {
                            Id = new Guid("d7804de1-c878-4e97-8e73-e0037b23e96c"),
                            AnswerText = "Reference type",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("e264bfcd-71d2-4a66-9f29-0e04fe319b3d")
                        },
                        new
                        {
                            Id = new Guid("f7cf511f-c7c0-4fcd-9f1e-3e34ce6ee54d"),
                            AnswerText = "Value type",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("e264bfcd-71d2-4a66-9f29-0e04fe319b3d")
                        },
                        new
                        {
                            Id = new Guid("a6567315-34d0-4bc4-b572-651cf46b118e"),
                            AnswerText = "Class type",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("e264bfcd-71d2-4a66-9f29-0e04fe319b3d")
                        },
                        new
                        {
                            Id = new Guid("fe84c34b-747f-4e1e-80ab-7090c16d724e"),
                            AnswerText = "None of the above",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("e264bfcd-71d2-4a66-9f29-0e04fe319b3d")
                        },
                        new
                        {
                            Id = new Guid("81878b28-547e-42a1-b051-f71cd7dd7308"),
                            AnswerText = "Link-List Inner Query",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("673bd0c7-18fa-4bfc-a85d-e328f998985c")
                        },
                        new
                        {
                            Id = new Guid("e8024eb7-541f-44f8-ac97-3de2bb0d088a"),
                            AnswerText = "Language-Integrated Query",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("673bd0c7-18fa-4bfc-a85d-e328f998985c")
                        },
                        new
                        {
                            Id = new Guid("eb0e62cf-cb80-4455-bff1-c743217e6173"),
                            AnswerText = "Linked-Integrated Query",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("673bd0c7-18fa-4bfc-a85d-e328f998985c")
                        },
                        new
                        {
                            Id = new Guid("e51d9f95-2614-4ac3-a429-28c90acbad5b"),
                            AnswerText = "Lazy Integration Query",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("673bd0c7-18fa-4bfc-a85d-e328f998985c")
                        },
                        new
                        {
                            Id = new Guid("eaf7838e-1003-4d24-8e64-e0f35451eec3"),
                            AnswerText = "C# and F#",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("85216c10-e07e-4737-95ce-6ecd3d31963c")
                        },
                        new
                        {
                            Id = new Guid("7b3ea024-2cec-4579-a6bf-403e9b25b314"),
                            AnswerText = "VB and F#",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("85216c10-e07e-4737-95ce-6ecd3d31963c")
                        },
                        new
                        {
                            Id = new Guid("23659ead-2549-4860-b5aa-2c4ec047f0ac"),
                            AnswerText = "C# and VB",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("85216c10-e07e-4737-95ce-6ecd3d31963c")
                        },
                        new
                        {
                            Id = new Guid("8bded336-4090-4944-a8fc-1b3d60eeb816"),
                            AnswerText = "All the above",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("85216c10-e07e-4737-95ce-6ecd3d31963c")
                        },
                        new
                        {
                            Id = new Guid("1729f838-9e58-475e-8284-b6bac932e881"),
                            AnswerText = "Object collection",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("5c705c54-7454-4607-9c96-7b42a64fdc15")
                        },
                        new
                        {
                            Id = new Guid("ec8cb4c6-fdeb-4632-9967-203d0ef2e6bf"),
                            AnswerText = "Double",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("5c705c54-7454-4607-9c96-7b42a64fdc15")
                        },
                        new
                        {
                            Id = new Guid("f42a1798-00b9-4988-a0ff-0fed9b2c817a"),
                            AnswerText = "Long",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("5c705c54-7454-4607-9c96-7b42a64fdc15")
                        },
                        new
                        {
                            Id = new Guid("768cca7f-d429-4af6-9a83-81f42b9c4132"),
                            AnswerText = "All the above",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("5c705c54-7454-4607-9c96-7b42a64fdc15")
                        },
                        new
                        {
                            Id = new Guid("cad1c9ca-5810-44e5-a835-5afa4bf29a13"),
                            AnswerText = "LINQ API is a bunch of extension methods included in System.Linq.Enumerable and System.Linq.Queryable class.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("61164f2d-70e1-410e-b03a-21d78e00d008")
                        },
                        new
                        {
                            Id = new Guid("0593f03b-94d8-4ef0-a2cf-2294910b14d4"),
                            AnswerText = "LINQ API is a bunch of abstract methods included in Enumerable and Queryable classes.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("61164f2d-70e1-410e-b03a-21d78e00d008")
                        },
                        new
                        {
                            Id = new Guid("485f32e3-bc29-4a82-a1c6-5fa777bb0afa"),
                            AnswerText = "LINQ API is bunch of queries written in C# and VB.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("61164f2d-70e1-410e-b03a-21d78e00d008")
                        },
                        new
                        {
                            Id = new Guid("18525932-8182-4736-82bf-25836ee8fb7c"),
                            AnswerText = "None of the above",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("61164f2d-70e1-410e-b03a-21d78e00d008")
                        },
                        new
                        {
                            Id = new Guid("4da954ad-7308-4c0e-8ebd-4d75be0d4f22"),
                            AnswerText = "Client",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("b77d774d-f697-4b01-89c1-214f0ccd9fb1")
                        },
                        new
                        {
                            Id = new Guid("9b063b12-3dcb-4359-baec-f505aab5196a"),
                            AnswerText = "Server",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("b77d774d-f697-4b01-89c1-214f0ccd9fb1")
                        },
                        new
                        {
                            Id = new Guid("9bd6b78a-fc61-4e13-8cb9-2da7c4e3fb3e"),
                            AnswerText = "Both, server and client",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("b77d774d-f697-4b01-89c1-214f0ccd9fb1")
                        },
                        new
                        {
                            Id = new Guid("252f0ba5-82a1-4db6-a9fd-2b1654e8b714"),
                            AnswerText = "Browser",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("b77d774d-f697-4b01-89c1-214f0ccd9fb1")
                        },
                        new
                        {
                            Id = new Guid("535ae009-8f31-4171-b3a2-0679855b20e1"),
                            AnswerText = "Synchronous",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("dc5d66d9-589d-4c85-b8dd-218c405eeef0")
                        },
                        new
                        {
                            Id = new Guid("01c0a297-089f-4eeb-9a93-bb495a3a76e7"),
                            AnswerText = "Multi-threaded",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("dc5d66d9-589d-4c85-b8dd-218c405eeef0")
                        },
                        new
                        {
                            Id = new Guid("53b89961-2f90-45fe-91a9-804afd2d3688"),
                            AnswerText = "Asynchronous",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("dc5d66d9-589d-4c85-b8dd-218c405eeef0")
                        },
                        new
                        {
                            Id = new Guid("0423b563-e600-4c9a-ab7c-6273b0a10712"),
                            AnswerText = "None of the above",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("dc5d66d9-589d-4c85-b8dd-218c405eeef0")
                        },
                        new
                        {
                            Id = new Guid("804fe3a2-5723-4eb9-96b0-1e66d4bff49a"),
                            AnswerText = "Windows",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("d277edea-70b3-4f61-bf10-1e0b4cd61b36")
                        },
                        new
                        {
                            Id = new Guid("6ca63fd5-cc34-4baa-a792-2476b2268c5e"),
                            AnswerText = "Mac",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("d277edea-70b3-4f61-bf10-1e0b4cd61b36")
                        },
                        new
                        {
                            Id = new Guid("7437e3ad-de5d-4edb-9dcc-1812d4bdb838"),
                            AnswerText = "Unix/Linux",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("d277edea-70b3-4f61-bf10-1e0b4cd61b36")
                        },
                        new
                        {
                            Id = new Guid("11ed72ff-c54d-4734-9957-75f16d146da0"),
                            AnswerText = "All",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("d277edea-70b3-4f61-bf10-1e0b4cd61b36")
                        },
                        new
                        {
                            Id = new Guid("25aecff5-9104-4fa0-a8e2-6b84b07d502f"),
                            AnswerText = "Testing node.js/JavaScript expressions",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("14a8c8b4-9771-4a65-8471-87d106bde29d")
                        },
                        new
                        {
                            Id = new Guid("03c95302-a79e-4944-9746-3c0a88d42bde"),
                            AnswerText = "Executing browser’s JavaScript expressions.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("14a8c8b4-9771-4a65-8471-87d106bde29d")
                        },
                        new
                        {
                            Id = new Guid("b6833840-6beb-4826-8835-6a4a7d830b21"),
                            AnswerText = "The preview of node.js application.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("14a8c8b4-9771-4a65-8471-87d106bde29d")
                        },
                        new
                        {
                            Id = new Guid("0e797347-cb11-4bad-9417-5571e746d968"),
                            AnswerText = "None of the above.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("14a8c8b4-9771-4a65-8471-87d106bde29d")
                        },
                        new
                        {
                            Id = new Guid("6593e507-9573-4107-ab71-7c5da704e80e"),
                            AnswerText = "True",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("7735c87d-6eb9-444f-9101-7e19c67d0e4d")
                        },
                        new
                        {
                            Id = new Guid("739461ec-7ffd-435d-8fab-43948a14e1ad"),
                            AnswerText = "False",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("7735c87d-6eb9-444f-9101-7e19c67d0e4d")
                        },
                        new
                        {
                            Id = new Guid("120eb6cf-4946-421b-84c0-a8603ab7968e"),
                            AnswerText = "<JavaScript></JavaScript>",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("480a2f8a-7a30-4b11-a77b-44da6991978f")
                        },
                        new
                        {
                            Id = new Guid("be9e0328-77c6-4ca0-a614-6fcea686ae62"),
                            AnswerText = "<script></script>",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("480a2f8a-7a30-4b11-a77b-44da6991978f")
                        },
                        new
                        {
                            Id = new Guid("b008d0ff-d28c-4778-9e91-0c1f4ded39ea"),
                            AnswerText = "<code></code>",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("480a2f8a-7a30-4b11-a77b-44da6991978f")
                        },
                        new
                        {
                            Id = new Guid("0222f55c-e5a0-4bba-b7a8-d9ccae31fa1f"),
                            AnswerText = "<head></head>",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("480a2f8a-7a30-4b11-a77b-44da6991978f")
                        },
                        new
                        {
                            Id = new Guid("b7edaa47-ba2d-46f8-a3ab-d7b7d3a15526"),
                            AnswerText = "new",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("f95b3f73-dd10-4210-b049-2f85f90f462e")
                        },
                        new
                        {
                            Id = new Guid("0f7da0eb-a6e2-4c41-bbee-b50cc854c7e6"),
                            AnswerText = "int",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("f95b3f73-dd10-4210-b049-2f85f90f462e")
                        },
                        new
                        {
                            Id = new Guid("8654d78f-4617-4a26-ac3e-c7ae3d6451a4"),
                            AnswerText = "string",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("f95b3f73-dd10-4210-b049-2f85f90f462e")
                        },
                        new
                        {
                            Id = new Guid("5c9a08f9-fe22-4870-8c1c-df9006c8b445"),
                            AnswerText = "let/const",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("f95b3f73-dd10-4210-b049-2f85f90f462e")
                        },
                        new
                        {
                            Id = new Guid("830f49a6-b92b-4eeb-bcc0-6f68004e619c"),
                            AnswerText = "String",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("27d793c6-a03e-40f0-a998-f9f147009247")
                        },
                        new
                        {
                            Id = new Guid("108cc96f-07cc-446d-b290-257cc2b634d1"),
                            AnswerText = "Number",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("27d793c6-a03e-40f0-a998-f9f147009247")
                        },
                        new
                        {
                            Id = new Guid("660d9ff9-d5de-461b-8e1b-198f99b3c915"),
                            AnswerText = "Boolean",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = false,
                            QuestionId = new Guid("27d793c6-a03e-40f0-a998-f9f147009247")
                        },
                        new
                        {
                            Id = new Guid("338fc9a9-e81e-4eb1-add0-2a2e2f723448"),
                            AnswerText = "All",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCorrect = true,
                            QuestionId = new Guid("27d793c6-a03e-40f0-a998-f9f147009247")
                        });
                });

            modelBuilder.Entity("TestApp.Data.Entity.Tests.TestQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3c83d8d-2b6a-4aff-94b8-850c231155d3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Which of the following methods is an entry point in the C# console program?",
                            TestId = new Guid("f14f0184-0b15-431f-b4e3-853224eed6dd")
                        },
                        new
                        {
                            Id = new Guid("b3ce3b36-c636-47ee-a8f2-be1d6457590e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Which of the followings are value types in C#?",
                            TestId = new Guid("f14f0184-0b15-431f-b4e3-853224eed6dd")
                        },
                        new
                        {
                            Id = new Guid("92aeaa44-ac36-41b1-8c05-fedb3d4984e1"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Which of the following is a reference type in C#?",
                            TestId = new Guid("f14f0184-0b15-431f-b4e3-853224eed6dd")
                        },
                        new
                        {
                            Id = new Guid("8891f8a7-9bbc-4a47-a143-99721b2cdf9b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "What is the nullable type in C#?",
                            TestId = new Guid("f14f0184-0b15-431f-b4e3-853224eed6dd")
                        },
                        new
                        {
                            Id = new Guid("e264bfcd-71d2-4a66-9f29-0e04fe319b3d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Struct is a _____.",
                            TestId = new Guid("f14f0184-0b15-431f-b4e3-853224eed6dd")
                        },
                        new
                        {
                            Id = new Guid("673bd0c7-18fa-4bfc-a85d-e328f998985c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "The full form of LINQ is _______.",
                            TestId = new Guid("91b1aa6d-bd4a-43e0-ad89-e672709e35fe")
                        },
                        new
                        {
                            Id = new Guid("85216c10-e07e-4737-95ce-6ecd3d31963c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "LINQ supports ________ syntax.",
                            TestId = new Guid("91b1aa6d-bd4a-43e0-ad89-e672709e35fe")
                        },
                        new
                        {
                            Id = new Guid("5c705c54-7454-4607-9c96-7b42a64fdc15"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Which of the following supports LINQ queries?",
                            TestId = new Guid("91b1aa6d-bd4a-43e0-ad89-e672709e35fe")
                        },
                        new
                        {
                            Id = new Guid("61164f2d-70e1-410e-b03a-21d78e00d008"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Which of the following statement is TRUE?",
                            TestId = new Guid("91b1aa6d-bd4a-43e0-ad89-e672709e35fe")
                        },
                        new
                        {
                            Id = new Guid("b77d774d-f697-4b01-89c1-214f0ccd9fb1"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Node.js runs on __________",
                            TestId = new Guid("b5902bf9-bea2-4fac-96bc-52c0ed52e6c7")
                        },
                        new
                        {
                            Id = new Guid("dc5d66d9-589d-4c85-b8dd-218c405eeef0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Node.js is ________ by default.",
                            TestId = new Guid("b5902bf9-bea2-4fac-96bc-52c0ed52e6c7")
                        },
                        new
                        {
                            Id = new Guid("d277edea-70b3-4f61-bf10-1e0b4cd61b36"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Node.js supports which of the following platform?",
                            TestId = new Guid("b5902bf9-bea2-4fac-96bc-52c0ed52e6c7")
                        },
                        new
                        {
                            Id = new Guid("14a8c8b4-9771-4a65-8471-87d106bde29d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Node.js terminal (REPL) is used for _________.",
                            TestId = new Guid("b5902bf9-bea2-4fac-96bc-52c0ed52e6c7")
                        },
                        new
                        {
                            Id = new Guid("7735c87d-6eb9-444f-9101-7e19c67d0e4d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "JavaScript is ECMAScript",
                            TestId = new Guid("c23f9ea6-50a9-417c-89bb-15194cc2787b")
                        },
                        new
                        {
                            Id = new Guid("480a2f8a-7a30-4b11-a77b-44da6991978f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "JavaScript written under which of the following tag?",
                            TestId = new Guid("c23f9ea6-50a9-417c-89bb-15194cc2787b")
                        },
                        new
                        {
                            Id = new Guid("f95b3f73-dd10-4210-b049-2f85f90f462e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "A variable in JavaScript declared with which of the following keyword?",
                            TestId = new Guid("c23f9ea6-50a9-417c-89bb-15194cc2787b")
                        },
                        new
                        {
                            Id = new Guid("27d793c6-a03e-40f0-a998-f9f147009247"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionText = "Which of the followings are primitive data types in JavaScript?",
                            TestId = new Guid("c23f9ea6-50a9-417c-89bb-15194cc2787b")
                        });
                });

            modelBuilder.Entity("TestApp.Data.Entity.Users.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce40ea29-e665-4a37-858b-e7d2359cdd4f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TestUser@gmail.com",
                            Password = "yP7xXNBu/Hny3XSz7QCNjOgkM7HOkPgVFiXTPr5dwTg="
                        },
                        new
                        {
                            Id = new Guid("a8a4828c-60f0-4f99-bbe6-229df1d098a2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TestUser2@gmail.com",
                            Password = "yP7xXNBu/Hny3XSz7QCNjOgkM7HOkPgVFiXTPr5dwTg="
                        });
                });

            modelBuilder.Entity("TestApp.Data.Entity.Tests.Test", b =>
                {
                    b.HasOne("TestApp.Data.Entity.Users.AppUser", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestApp.Data.Entity.Tests.TestAnswer", b =>
                {
                    b.HasOne("TestApp.Data.Entity.Tests.TestQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestApp.Data.Entity.Tests.TestQuestion", b =>
                {
                    b.HasOne("TestApp.Data.Entity.Tests.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestApp.Data.Entity.Tests.Test", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestApp.Data.Entity.Tests.TestQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TestApp.Data.Entity.Users.AppUser", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
